/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var graProyecto = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,8],$V2=[1,9],$V3=[2,5,10,13],$V4=[2,5,13],$V5=[1,28],$V6=[1,26],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[2,17,21,44,45,46,47,48],$Vd=[12,53,102],$Ve=[2,122],$Vf=[1,46],$Vg=[1,45],$Vh=[1,44],$Vi=[1,49],$Vj=[1,64],$Vk=[1,63],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,61],$Vs=[1,62],$Vt=[2,11,17,21,44,45,46,47,48,49,56,57,59,65,89,98,103,104],$Vu=[1,68],$Vv=[1,72],$Vw=[1,71],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[12,28,67,69,70,71,72,73,74,75,76,77,78,79,80,81,94,102],$VK=[1,113],$VL=[1,111],$VM=[1,110],$VN=[1,108],$VO=[1,107],$VP=[1,109],$VQ=[1,112],$VR=[1,117],$VS=[1,115],$VT=[1,116],$VU=[28,102],$VV=[2,11,17,21,44,45,46,47,48,49,56,57,59,65,66,89,98,103,104],$VW=[11,17,44,45,46,47,48,49,56,57,59,65,89,98,103,104],$VX=[1,141],$VY=[12,28,67,69,74,75,76,77,78,79,80,81,94,102],$VZ=[12,28,67,69,70,71,74,75,76,77,78,79,80,81,94,102],$V_=[12,28,74,75,76,77,78,79,80,81,94,102],$V$=[12,28,78,79,80,81,94,102],$V01=[1,155],$V11=[1,201],$V21=[17,93,97],$V31=[1,221],$V41=[2,97],$V51=[11,44,45,46,47,48,49,56,57,59,65,89,98,103,104];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_IMPORTES_CLASES":4,"EOF":5,"LISTA_IMPORTE":6,"LISTA_CLASES":7,"IMPORTE":8,"SENTENCIA_CLASE":9,"import":10,"id":11,";":12,"class":13,"BLOQUE_DECLARACIONES_METFUNVAR":14,"{":15,"LISTA_DECLARACIONES_METFUNVAR_P":16,"}":17,"DECLARACION_AMBITO_CLASE":18,"OPCION_ID_MAIN":19,"main":20,"void":21,"(":22,"OPCION_METODO_FUNCION":23,"TIPO":24,"LISTA_IDS":25,"ASIGNACION":26,"LISTA_PARAMETROS_CON_TIPO":27,")":28,"BLOQUE_INSTRUCCIONES":29,"INSTRUCCIONES":30,"INSTRUCCION":31,"SENTENCIAIMPRIME":32,"WHILE":33,"IF":34,"DOWHILE":35,"SENTENCIA_FOR":36,"SENTENCIA_SWITCH":37,"ASIGNACION_SIMPLE":38,"DECLARACION_ADENTRO_DE_METODOS_FUNCIONES":39,"SENTENCIA_CONTINUE":40,"SENTENCIA_RETURN_FUNCION":41,"SENTENCIA_RETURN_METODO":42,"SENTENCIA_BREAK":43,"int":44,"String":45,"boolean":46,"double":47,"char":48,"for":49,"DEC_for":50,"EXPRESION":51,"INCRE_DECRE":52,"=":53,"incremento":54,"decremento":55,"do":56,"while":57,"CONDICION":58,"System":59,".":60,"out":61,"OPCIONIMPRIME":62,"println":63,"print":64,"if":65,"else":66,"-":67,"!":68,"+":69,"*":70,"/":71,"%":72,"^":73,"<":74,">":75,">=":76,"<=":77,"==":78,"!=":79,"||":80,"&&":81,"decimal":82,"true":83,"false":84,"STRING_LITERAL":85,"EXPRESION_METODO":86,"caracter":87,"entero":88,"switch":89,"BLOQUE_CASES":90,"LISTACASES":91,"OPCIONDEFAULT":92,"default":93,":":94,"BLOQUEINST_CON_OPCION_VACIA":95,"CASES_P":96,"case":97,"break":98,"INSTRUCCIONESWITCH":99,"INSTRUCCIONSWITCH":100,"LISTA_EXPRESIONES_LLAMADA_METODO":101,",":102,"continue":103,"return":104,"SENTENCIA_BREAK_CON_CICLO":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"import",11:"id",12:";",13:"class",15:"{",17:"}",20:"main",21:"void",22:"(",28:")",44:"int",45:"String",46:"boolean",47:"double",48:"char",49:"for",53:"=",54:"incremento",55:"decremento",56:"do",57:"while",59:"System",60:".",61:"out",63:"println",64:"print",65:"if",66:"else",67:"-",68:"!",69:"+",70:"*",71:"/",72:"%",73:"^",74:"<",75:">",76:">=",77:"<=",78:"==",79:"!=",80:"||",81:"&&",82:"decimal",83:"true",84:"false",85:"STRING_LITERAL",87:"caracter",88:"entero",89:"switch",93:"default",94:":",97:"case",98:"break",102:",",103:"continue",104:"return"},
productions_: [0,[3,2],[3,2],[3,2],[3,1],[4,2],[6,2],[6,1],[7,2],[7,1],[8,3],[9,3],[9,1],[14,3],[14,2],[14,1],[16,2],[16,1],[19,1],[19,1],[18,4],[18,4],[18,3],[18,1],[23,3],[23,2],[30,2],[30,1],[30,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[24,1],[24,1],[24,1],[24,1],[24,1],[36,9],[50,4],[50,3],[52,2],[52,2],[35,5],[32,9],[62,1],[62,1],[62,1],[33,3],[34,3],[34,5],[34,5],[58,3],[29,3],[29,2],[51,2],[51,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,3],[37,5],[90,4],[90,2],[92,4],[92,0],[91,2],[91,1],[96,5],[43,2],[95,1],[95,0],[99,2],[99,1],[99,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[38,4],[38,5],[38,4],[86,4],[86,3],[86,1],[101,3],[101,1],[39,3],[25,3],[25,1],[26,3],[26,1],[27,4],[27,2],[40,2],[42,2],[41,3],[105,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2: case 3:
this.$ = new Tree($$[$0-1]);console.log("CREACION DEL ARBOL"); return this.$;
break;
case 4:
this.$ = new Tree($$[$0]);console.log("CREACION DEL ARBOL"); return this.$;
break;
case 5:
let init =  new Inicio($$[$0-1], $$[$0]); this.$ = init.Lista_importes_clases
break;
case 6: case 8: case 16: case 26: case 92: case 98:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 9: case 17: case 27: case 93: case 99: case 119: case 122:
 this.$ = [$$[$0]]; 
break;
case 10:
this.$ = new Importe($$[$0-1], $$[$0-1] ,  this._$.first_line, this._$.first_column);
break;
case 11:
this.$ = new ClaseInstruccion($$[$0-1], $$[$0] ,  this._$.first_line, this._$.first_column);
break;
case 12: case 15: case 23: case 28: case 55: case 100:
  console.error('Este es un error sintÃ¡ctico: [' + yytext + ']  en la linea: ' +  this._$.first_line + ', en la columna: ' + this._$.first_column); CErrores.Errores.add(new CNodoError.NodoError("Sintactico","error::=       "+yytext+"    Columna:"+ this._$.first_column ,this._$.first_line)); 
break;
case 13: case 60: case 61:
this.$ = $$[$0-1];
break;
case 14: case 62: case 89: case 91: case 124:
this.$ = [];
break;
case 18: case 19:
this.$ = $$[$0]
break;
case 20:
 this.$ = new DeclaracionMetodo($$[$0-3], $$[$0-2] , $$[$0] ,  this._$.first_line , this._$.first_column);console.log("METODO");
break;
case 21:
 this.$ = new DeclaracionFuncion($$[$0-3], $$[$0-2] , $$[$0] ,  this._$.first_line , this._$.first_column); console.log("FUNCION"); 
break;
case 22:
this.$ = new DeclaracionGlobales($$[$0-2],$$[$0-1],$$[$0],this._$.first_line , this._$.first_column ); console.log(" LISTA ids solo globales ");
break;
case 24:
this.$ = new Opcion_metodo_funcion($$[$0-2] , $$[$0] , this._$.first_line); console.log("CON PARAMETROS");
break;
case 25:
this.$ = new Opcion_metodo_funcion( [], $$[$0]  , this._$.first_line); console.log("SIN PARAMETROS ");
break;
case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 38: case 39: case 54: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111:
this.$ = $$[$0];
break;
case 37:
this.$ = $$[$0]; console.log("continue");
break;
case 40:
this.$ = $$[$0];console.log("break");
break;
case 41:
this.$ = new Type(types.INT);
break;
case 42:
this.$ = new Type(types.STRING);
break;
case 43:
this.$ = new Type(types.BOOLEAN);
break;
case 44:
this.$ = new Type(types.DOUBLE);
break;
case 45:
this.$ = new Type(types.CHAR);
break;
case 46:
esta_en_un_ciclo = true;console.log("esta en un ciclo for");this.$ = new For($$[$0-6], $$[$0-4],$$[$0-2] , $$[$0] , this._$.first_line , this._$.first_column); esta_en_un_ciclo = false; console.log("salio del ciclo for");
break;
case 47:
this.$ = new Declaracion($$[$0-3] , $$[$0-2] ,$$[$0] , this._$.first_line , this._$.first_column );
break;
case 48:
this.$ = new  Asignacion($$[$0-2] , $$[$0] , this._$.first_line , this._$.first_column ) ; 
break;
case 49:
this.$ = new Incre_decre($$[$0-1], "++", this._$.first_line , this._$.first_column ) ; console.log("incremento");
break;
case 50:
this.$ = new Incre_decre($$[$0-1], "--", this._$.first_line , this._$.first_column ) ;  console.log("decremento");
break;
case 51:
this.$ = new Do_while($$[$0-1] ,$$[$0-3] , this._$.first_line , this._$.first_column );
break;
case 52:
 this.$ = new Sentencia_imprime($$[$0-4],$$[$0-2], this._$.first_line, this._$.first_column);
break;
case 53:
this.$ = $$[$0] ; 
break;
case 56:
this.$ = new While($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 57:
this.$ = new If($$[$0-1], $$[$0], [], this._$.first_line, this._$.first_column);
break;
case 58:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 59:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], this._$.first_line, this._$.first_column);
break;
case 63:
 this.$ = new Arithmetic($$[$0], null, '-', this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new Arithmetic($$[$0-1], null, '!', this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '+', this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '-', this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '*', this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '/', this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '%', this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '^', this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new Relational($$[$0-2], $$[$0], '<', this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new Relational($$[$0-2], $$[$0], '>', this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = new Relational($$[$0-2], $$[$0], '>=', this._$.first_line, this._$.first_column); console.log(">====="); 
break;
case 74:
 this.$ = new Relational($$[$0-2], $$[$0], '<=', this._$.first_line, this._$.first_column); 
break;
case 75:
 this.$ = new Relational($$[$0-2], $$[$0], '==', this._$.first_line, this._$.first_column); 
break;
case 76:
 this.$ = new Relational($$[$0-2], $$[$0], '!=', this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$ = new Logic($$[$0-2], $$[$0], '&&', this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = new Logic($$[$0-2], $$[$0], '||', this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = new Primitive(new Type(types.DOUBLE), Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = new Primitive(new Type(types.BOOLEAN), true, this._$.first_line, this._$.first_column); 
break;
case 81:
 this.$ = new Primitive(new Type(types.BOOLEAN), false, this._$.first_line, this._$.first_column); 
break;
case 82:
 this.$ = new Primitive(new Type(types.STRING), $$[$0].replace(/\"/g,""), this._$.first_line, this._$.first_column); 
break;
case 83:
 this.$ = $$[$0]
break;
case 84:
 this.$ = new Primitive(new Type(types.CHAR), $$[$0].replace(/\'/g,""), this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = new Primitive(new Type(types.INT), Number($$[$0]) , this._$.first_line, this._$.first_column); 
break;
case 86:
 this.$ = $$[$0-1]; 
break;
case 87:
this.$ = new Sentencia_switch($$[$0-2],$$[$0],this._$.first_line, this._$.first_column)
break;
case 88:
this.$ = new Bloque_cases($$[$0-2] ,$$[$0-1]);
break;
case 90:
 this.$ = new Ins_Default($$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
break;
case 94:
 this.$ = new Ins_case($$[$0-3],$$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
break;
case 95: case 130:
this.$ = new Break(this._$.first_line, this._$.first_column) ;
break;
case 96:
this.$=$$[$0];
break;
case 97:
this.$=[];
break;
case 112:
this.$ = new Asignacion($$[$0-3], $$[$0-1],this._$.first_line, this._$.first_column); ;console.log("jeje simple asignacion")
break;
case 113:
this.$ = new Llamada_metodo($$[$0-4] ,$$[$0-2], this._$.first_line, this._$.first_column);console.log("call metodo")
break;
case 114:
this.$ = new Llamada_metodo($$[$0-3] ,[], this._$.first_line, this._$.first_column); console.log("NO LLEVA PARAMAETTROS");
break;
case 115:
this.$ = new Llamada_metodo($$[$0-3] ,$$[$0-1], this._$.first_line, this._$.first_column);console.log("SI lleva parametros")
break;
case 116:
this.$ = new Llamada_metodo($$[$0-2] ,[], this._$.first_line, this._$.first_column); console.log("NO LLEVA PARAMAETTROS");
break;
case 117:
 this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column); ;console.log("ID SIMPLE ")
break;
case 118: case 121:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 120:
 this.$ = new Declaracion_adentro_de_metodos_funciones($$[$0-2],$$[$0-1],$$[$0] ,this._$.first_line , this._$.first_column ); console.log("dec adentro de metodos");
break;
case 123:
this.$ = $$[$0-1]
break;
case 125:
 $$[$0-3].push(new Parametro($$[$0-1] , $$[$0] ,this._$.first_line , this._$.first_column)); this.$ = $$[$0-3]; 
break;
case 126:
 this.$ = [new Parametro($$[$0-1] , $$[$0] ,this._$.first_line , this._$.first_column)]; 
break;
case 127:
this.$ = new Continue( $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 128:
this.$ = new Return_metodo($$[$0-1], this._$.first_line , this._$.first_column);
break;
case 129:
this.$ = new Return_funcion($$[$0-2], $$[$0-1] , this._$.first_line , this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,5],6:3,7:4,8:6,9:7,10:$V1,13:$V2},{1:[3]},{5:[1,11]},{2:$V0,5:[1,12],7:13,8:14,9:7,10:$V1,13:$V2},{2:$V0,5:[1,15],9:16,13:$V2},{1:[2,4]},o($V3,[2,7]),o($V4,[2,9]),{11:[1,17]},{11:[1,18]},o($V4,[2,12]),{1:[2,1]},{1:[2,2]},{2:$V0,5:[2,5],9:16,13:$V2},o($V3,[2,6]),{1:[2,3]},o($V4,[2,8]),{12:[1,19]},{2:[1,22],14:20,15:[1,21]},o($V3,[2,10]),o($V4,[2,11]),{2:$V5,16:23,17:[1,24],18:25,21:$V6,24:27,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($V4,[2,15]),{2:$V5,17:[1,34],18:35,21:$V6,24:27,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($V4,[2,14]),o($Vc,[2,17]),{11:[1,38],19:36,20:[1,37]},{11:[1,39],25:40},o($Vc,[2,23]),{11:[2,41]},{11:[2,42]},{11:[2,43]},{11:[2,44]},{11:[2,45]},o($V4,[2,13]),o($Vc,[2,16]),{22:[1,41]},{22:[2,18]},{22:[2,19]},o($Vd,$Ve,{22:[1,42]}),{12:$Vf,26:43,53:$Vg,102:$Vh},{23:47,24:50,27:48,28:$Vi,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{23:51,24:50,27:48,28:$Vi,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vc,[2,22]),{11:[1,52]},{11:$Vj,22:$Vk,51:53,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},o($Vt,[2,124]),o($Vc,[2,20]),{28:[1,65],102:[1,66]},{15:$Vu,29:67},{11:[1,69]},o($Vc,[2,21]),o($Vd,[2,121]),{12:[1,70],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},{11:$Vj,22:$Vk,51:85,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:86,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},o($VJ,[2,79]),o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,83]),o($VJ,[2,84]),o($VJ,[2,85]),{11:$Vj,22:$Vk,51:87,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},o($VJ,[2,117],{22:[1,88]}),{15:$Vu,29:89},{24:90,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vc,[2,25]),{2:[1,94],11:$VK,17:[1,92],24:114,30:91,31:93,32:95,33:96,34:97,35:98,36:99,37:100,38:101,39:102,40:103,41:104,42:105,43:106,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$VL,56:$VM,57:$VN,59:$VO,65:$VP,89:$VQ,98:$VR,103:$VS,104:$VT},o($VU,[2,126]),o($Vt,[2,123]),{11:$Vj,22:$Vk,51:118,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:119,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:120,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:121,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:122,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:123,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:124,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:125,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:126,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:127,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:128,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:129,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:130,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:131,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},o($VJ,[2,63]),o($VJ,[2,64]),{28:[1,132],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},{11:$Vj,22:$Vk,28:[1,134],51:135,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs,101:133},o($Vc,[2,24]),{11:[1,136]},{11:$VK,17:[1,137],24:114,31:138,32:95,33:96,34:97,35:98,36:99,37:100,38:101,39:102,40:103,41:104,42:105,43:106,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$VL,56:$VM,57:$VN,59:$VO,65:$VP,89:$VQ,98:$VR,103:$VS,104:$VT},o($VV,[2,62]),o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,33]),o($VW,[2,34]),o($VW,[2,35]),o($VW,[2,36]),o($VW,[2,37]),o($VW,[2,38]),o($VW,[2,39]),o($VW,[2,40]),{60:[1,139]},{22:$VX,58:140},{22:$VX,58:142},{15:$Vu,29:143},{22:[1,144]},{22:[1,145]},{22:[1,147],53:[1,146]},{11:[1,149],25:148},{12:[1,150]},{11:$Vj,12:[1,152],22:$Vk,51:151,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{12:[1,153]},o($VY,[2,65],{70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($VY,[2,66],{70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($VZ,[2,67],{72:$Vz,73:$VA}),o($VZ,[2,68],{72:$Vz,73:$VA}),o($VJ,[2,69]),o($VJ,[2,70]),o($V_,[2,71],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($V_,[2,72],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($V_,[2,73],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($V_,[2,74],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($V$,[2,75],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE}),o($V$,[2,76],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE}),o([12,28,80,94,102],[2,77],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,81:$VI}),o([12,28,80,81,94,102],[2,78],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VJ,[2,86]),{28:[1,154],102:$V01},o($VJ,[2,116]),o($VU,[2,119],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI}),o($VU,[2,125]),o($VV,[2,61]),o($VW,[2,26]),{61:[1,156]},{15:$Vu,29:157},{11:$Vj,22:$Vk,51:158,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{15:$Vu,29:159},{57:[1,160]},{11:[1,163],24:162,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,50:161},{11:$Vj,22:$Vk,51:164,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,51:165,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:$Vj,22:$Vk,28:[1,167],51:135,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs,101:166},{12:$Vf,26:168,53:$Vg,102:$Vh},o($Vd,$Ve),o($VW,[2,127]),{12:[1,169],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},o($VW,[2,128]),o([11,17,44,45,46,47,48,49,56,57,59,65,89,93,97,98,103,104],[2,95]),o($VJ,[2,115]),{11:$Vj,22:$Vk,51:170,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{60:[1,171]},o($VW,[2,56]),{28:[1,172],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},o($VW,[2,57],{66:[1,173]}),{22:$VX,58:174},{12:[1,175]},{11:[1,176]},{53:[1,177]},{28:[1,178],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},{12:[1,179],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},{28:[1,180],102:$V01},{12:[1,181]},o($VW,[2,120]),o($VW,[2,129]),o($VU,[2,118],{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI}),{2:[1,185],62:182,63:[1,183],64:[1,184]},o([12,15],[2,60]),{15:$Vu,29:186,34:187,65:$VP},{12:[1,188]},{11:$Vj,22:$Vk,51:189,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{53:[1,190]},{11:$Vj,22:$Vk,51:191,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{15:[1,193],90:192},o($VW,[2,112]),{12:[1,194]},o($VW,[2,114]),{22:[1,195]},{22:[2,53]},{22:[2,54]},{22:[2,55]},o($VW,[2,58]),o($VW,[2,59]),o($VW,[2,51]),{12:[1,196],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},{11:$Vj,22:$Vk,51:197,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{12:[2,48],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},o($VW,[2,87]),{17:[1,199],91:198,96:200,97:$V11},o($VW,[2,113]),{11:$Vj,22:$Vk,51:202,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{11:[1,204],52:203},{12:[2,47],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},{17:[2,91],92:205,93:[1,207],96:206,97:$V11},o($VW,[2,89]),o($V21,[2,93]),{11:$Vj,22:$Vk,51:208,67:$Vl,68:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:60,87:$Vr,88:$Vs},{28:[1,209],67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI},{28:[1,210]},{54:[1,211],55:[1,212]},{17:[1,213]},o($V21,[2,92]),{94:[1,214]},{67:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,94:[1,215]},{12:[1,216]},{15:$Vu,29:217},{28:[2,49]},{28:[2,50]},o($VW,[2,88]),{2:$V31,11:$VK,24:114,32:222,33:223,34:224,35:225,36:226,37:227,38:228,39:229,40:230,41:231,42:232,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$VL,56:$VM,57:$VN,59:$VO,65:$VP,89:$VQ,95:218,98:$V41,99:219,100:220,103:$VS,104:$VT},{2:$V31,11:$VK,24:114,32:222,33:223,34:224,35:225,36:226,37:227,38:228,39:229,40:230,41:231,42:232,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$VL,56:$VM,57:$VN,59:$VO,65:$VP,89:$VQ,95:233,98:$V41,99:219,100:220,103:$VS,104:$VT},o($VW,[2,52]),o($VW,[2,46]),{43:234,98:$VR},{11:$VK,24:114,32:222,33:223,34:224,35:225,36:226,37:227,38:228,39:229,40:230,41:231,42:232,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$VL,56:$VM,57:$VN,59:$VO,65:$VP,89:$VQ,98:[2,96],100:235,103:$VS,104:$VT},o($V51,[2,99]),o($V51,[2,100]),o($V51,[2,101]),o($V51,[2,102]),o($V51,[2,103]),o($V51,[2,104]),o($V51,[2,105]),o($V51,[2,106]),o($V51,[2,107]),o($V51,[2,108]),o($V51,[2,109]),o($V51,[2,110]),o($V51,[2,111]),{43:236,98:$VR},{17:[2,90]},o($V51,[2,98]),o($V21,[2,94])],
defaultActions: {5:[2,4],11:[2,1],12:[2,2],15:[2,3],29:[2,41],30:[2,42],31:[2,43],32:[2,44],33:[2,45],37:[2,18],38:[2,19],183:[2,53],184:[2,54],185:[2,55],211:[2,49],212:[2,50],234:[2,90]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  /* cada importe es un NODO del arbol ATS
   el patron interprete dice que se tiene que crear todo modular una clase por nodo */
    const {Primitive} = require('../Expresiones/Primitive');
    const {Arithmetic} = require('../Expresiones/Arithmetic');
    const {Relational} = require('../Expresiones/Relational');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Logic} = require('../Expresiones/Logic');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Print} = require('../Instrucciones/Print');
    const {If} = require('../Instrucciones/If');
    const {While} = require('../Instrucciones/While');
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {Excepcion} = require('../utils/Exception');
    const {Type, types} = require('../utils/Type');
    const {Tree} = require('../Simbols/Tree');
  
    const {Importe} = require('../Otros/Importe');
    const {ClaseInstruccion} = require('../Otros/ClaseInstruccion');
    const {Inicio} = require('../Otros/Inicio');
    const {Return_metodo} = require('../Instrucciones/Return_metodo');
    const {Return_funcion} = require('../Instrucciones/Return_funcion');
    const {Sentencia_imprime} = require('../Instrucciones/Sentencia_imprime');
    const {Opcion_metodo_funcion} = require('../Otros/Opcion_metodo_funcion');
    const {Do_while} = require('../Instrucciones/Do_while');
    const {Incre_decre} = require('../Instrucciones/incre_decre');
    const {For} = require('../Instrucciones/For');
    const {Llamada_metodo} = require('../Instrucciones/Llamada_metodo');
    const {Parametro} = require('../Instrucciones/Parametro');
    const {Declaracion_adentro_de_metodos_funciones} = require('../Otros/Declaracion_adentro_de_metodos_funciones');
    const {Sentencia_switch} = require('../Instrucciones/Sentencia_switch');
    const {Ins_case} = require('../Instrucciones/Ins_case');
    const {Ins_Default} = require('../Instrucciones/Ins_Default');
    const {Bloque_cases} = require('../Instrucciones/Bloque_cases');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {DeclaracionFuncion} = require('../Instrucciones/DeclaracionFuncion');
    const {DeclaracionGlobales} = require('../Instrucciones/DeclaracionGlobales');

    let CErrores=require('../ManejoErrores/Errores');
    let CNodoError=require('../ManejoErrores/NodoError');
    var esta_en_un_ciclo = false;
    var esta_en_un_metodo = false ; 
    var esta_en_una_funcion = false; 
    var esta_en_un_switch = false;
    var isMain = false; 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: /*se ignoran*/ 
break;
case 2:
break;
case 3:// comentario simple lÃ­nea
break;
case 4:// comentario multiple lÃ­neas
break;
case 5:return 87
break;
case 6:return 82
break;
case 7:return 88 
break;
case 8:console.log("STRING QUEMADO ");return 85
break;
case 9:console.log("comentario Bloque reconocido");return 'comentarioBloque'
break;
case 10:console.log("comLinea reconocido"); return 'comentarioLinea'
break;
case 11:return 94
break;
case 12:return 71
break;
case 13:return 12
break;
case 14:return 55
break;
case 15:return 67
break;
case 16:return 54
break;
case 17:return 69
break;
case 18:return 70
break;
case 19:return 73
break;
case 20:return 72
break;
case 21:return 60
break;
case 22:return 77
break;
case 23:console.log("||||| MAYOR O IGUAL ||||"); return 76 ;
break;
case 24:return 74
break;
case 25:return 75
break;
case 26:return 78
break;
case 27:return 79
break;
case 28:return 80
break;
case 29:return 81
break;
case 30:return 68
break;
case 31:return 53
break;
case 32:return 102
break;
case 33:return 22
break;
case 34:return 28  
break;
case 35:return 15
break;
case 36:return 17
break;
case 37:return 20
break;
case 38:return 63
break;
case 39:return 64
break;
case 40:return 61 
break;
case 41:return 59
break;
case 42:return 21
break;
case 43:return 104
break;
case 44:return 65
break;
case 45:return 66
break;
case 46:return 89
break;
case 47:return 97
break;
case 48:return 93 
break;
case 49:return 98
break;
case 50:return 103
break;
case 51:return 57
break;
case 52:return 56
break;
case 53:return 49
break;
case 54:return 84
break;
case 55:return 83
break;
case 56:return 13
break;
case 57:return 10
break;
case 58:return 48
break;
case 59:return 47  
break;
case 60:return 44
break;
case 61:return 45
break;
case 62:return 46
break;
case 63:return 11
break;
case 64:return 5
break;
case 65: CErrores.Errores.add(new CNodoError.NodoError("LEXICO","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_line));  console.error('Este es un error lÃ©xico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \t\r\n\f])/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(('[^â¼]')))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:{comentarioBloque})/,/^(?:{comentarioLinea})/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = graProyecto;
exports.Parser = graProyecto.Parser;
exports.parse = function () { return graProyecto.parse.apply(graProyecto, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}